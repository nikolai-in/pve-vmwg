---
- name: Clean up VM Subnet with WireGuard VPN Routing
  hosts: proxmox_hosts
  become: true
  vars:
    vm_subnet: "10.10.0.0/24"
    routing_table_id: 200

  tasks:
    - name: Stop WireGuard service
      ansible.builtin.systemd:
        name: wg-quick@wg0
        state: stopped
        enabled: false
      failed_when: false

    - name: Stop dnsmasq service
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        state: stopped
        enabled: false
      failed_when: false

    - name: Check if vmwg0 interface exists
      ansible.builtin.command: ip link show vmwg0
      register: vmwg0_check
      failed_when: false
      changed_when: false

    - name: Bring down vmwg0 interface
      ansible.builtin.command: ifdown vmwg0
      when: vmwg0_check.rc == 0
      register: ifdown_result
      failed_when: false
      changed_when: ifdown_result.rc == 0

    - name: Check existing NAT rules
      ansible.builtin.command: iptables -t nat -C POSTROUTING -s "{{ vm_subnet }}" -o wg0 -j MASQUERADE
      register: nat_rule_check
      failed_when: false
      changed_when: false

    - name: Clean up NAT rules
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: "{{ vm_subnet }}"
        out_interface: wg0
        jump: MASQUERADE
        state: absent
      when: nat_rule_check.rc == 0

    - name: Check existing CT rules
      ansible.builtin.command: iptables -t raw -C PREROUTING -i fwbr+ -j CT --zone 1
      register: ct_rule_check
      failed_when: false
      changed_when: false

    - name: Clean up CT rules using command (iptables module doesn't support --zone)
      ansible.builtin.command: iptables -t raw -D PREROUTING -i fwbr+ -j CT --zone 1
      when: ct_rule_check.rc == 0
      register: ct_cleanup_result
      failed_when: false
      changed_when: ct_cleanup_result.rc == 0

    - name: Check existing policy routing rules
      ansible.builtin.shell: |
        set -o pipefail
        ip rule show | grep -q "from {{ vm_subnet }} lookup {{ routing_table_id }}" ||
        ip rule show | grep -q "to {{ vm_subnet }} lookup {{ routing_table_id }}"
      register: policy_rules_check
      failed_when: false
      changed_when: false

    - name: Clean up policy routing rules
      ansible.builtin.shell: |
        set -o pipefail
        changed=false
        if ip rule show | grep -q "from {{ vm_subnet }} lookup {{ routing_table_id }}"; then
          ip rule del from {{ vm_subnet }} table {{ routing_table_id }}
          changed=true
        fi
        if ip rule show | grep -q "to {{ vm_subnet }} lookup {{ routing_table_id }}"; then
          ip rule del to {{ vm_subnet }} table {{ routing_table_id }}
          changed=true
        fi
        if [ "$changed" = "true" ]; then
          echo "Rules removed"
        fi
      register: policy_cleanup_result
      when: policy_rules_check.rc == 0
      changed_when: "'Rules removed' in policy_cleanup_result.stdout"

    - name: Check if routing table has entries
      ansible.builtin.command: ip route show table {{ routing_table_id }}
      register: routing_table_check
      failed_when: false
      changed_when: false

    - name: Clean up routing table
      ansible.builtin.shell: |
        set -o pipefail
        if [ -n "$(ip route show table {{ routing_table_id }})" ]; then
          ip route flush table {{ routing_table_id }}
          echo "Table flushed"
        fi
      register: route_cleanup_result
      when: routing_table_check.stdout != ""
      changed_when: "'Table flushed' in route_cleanup_result.stdout"

    - name: Remove configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/wireguard/wg0.conf
        - /etc/network/interfaces.d/vmwgnat
        - /etc/dnsmasq.d/vmwgnat
        - /etc/systemd/system/dnsmasq@.service
        - /root/debug-vmwg0.sh

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Check if iptables rules need saving
      ansible.builtin.stat:
        path: /etc/iptables/rules.v4
      register: iptables_file
      when: ansible_facts['os_family'] == "Debian"

    - name: Save clean iptables rules
      ansible.builtin.shell: |
        set -o pipefail
        iptables-save > /etc/iptables/rules.v4
        ip6tables-save > /etc/iptables/rules.v6
        echo "Rules saved"
      register: iptables_save_result
      when:
        - ansible_facts['os_family'] == "Debian"
        - iptables_file.stat.exists
      changed_when: "'Rules saved' in iptables_save_result.stdout"

    - name: Restart networking
      ansible.builtin.systemd:
        name: networking
        state: restarted
