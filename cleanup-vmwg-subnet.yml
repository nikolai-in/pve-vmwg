---
- name: Clean up VM Subnet with WireGuard VPN Routing
  hosts: proxmox_hosts
  become: true
  vars:
    vm_subnet: "10.10.0.0/24"
    routing_table_id: 200

  tasks:
    - name: Check if network failsafe script exists
      ansible.builtin.stat:
        path: /usr/local/bin/network-failsafe
      register: failsafe_script_check

    - name: Disarm network failsafe if active and script exists
      ansible.builtin.command: /usr/local/bin/network-failsafe disarm
      register: failsafe_disarm_result
      failed_when: false
      changed_when: failsafe_disarm_result.rc == 0
      when: failsafe_script_check.stat.exists

    - name: Force remove failsafe lock file if script doesn't exist
      ansible.builtin.file:
        path: /tmp/network-failsafe.lock
        state: absent
      when: not failsafe_script_check.stat.exists

    - name: Stop WireGuard service
      ansible.builtin.systemd:
        name: wg-quick@wg0
        state: stopped
        enabled: false
      failed_when: false

    - name: Stop dnsmasq service
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        state: stopped
        enabled: false
      failed_when: false

    - name: Re-enable default dnsmasq service (optional - was disabled for Proxmox)
      ansible.builtin.systemd:
        name: dnsmasq
        state: stopped
        enabled: false
      failed_when: false
      # Note: We keep it disabled as per Proxmox best practices
      # Change 'enabled: false' to 'enabled: true' if you want to restore it

    - name: Check if vmwg0 interface exists
      ansible.builtin.command: ip link show vmwg0
      register: vmwg0_check
      failed_when: false
      changed_when: false

    - name: Bring down vmwg0 interface cleanly
      ansible.builtin.command: ifdown vmwg0
      when: vmwg0_check.rc == 0
      register: ifdown_result
      failed_when: false
      changed_when: ifdown_result.rc == 0

    - name: Force remove vmwg0 interface if ifdown failed
      ansible.builtin.shell: |
        if ip link show vmwg0 >/dev/null 2>&1; then
          ip link set vmwg0 down 2>/dev/null || true
          ip link delete vmwg0 2>/dev/null || true
          echo "Interface force removed"
        fi
      register: force_remove_result
      when: vmwg0_check.rc == 0 and (ifdown_result is failed or ifdown_result.rc != 0)
      changed_when: "'Interface force removed' in force_remove_result.stdout"

    - name: Kill any remaining failsafe background processes
      ansible.builtin.shell: |
        pkill -f "network-failsafe" || true
        pkill -f "sleep.*network-failsafe" || true
        echo "Background processes cleaned up"
      register: process_cleanup_result
      changed_when: true

    - name: Comprehensive iptables cleanup
      ansible.builtin.shell: |
        set -o pipefail
        changed=false

        # Clean up NAT rules (multiple attempts to catch duplicates)
        while iptables -t nat -C POSTROUTING -s "{{ vm_subnet }}" -o wg0 -j MASQUERADE 2>/dev/null; do
          iptables -t nat -D POSTROUTING -s "{{ vm_subnet }}" -o wg0 -j MASQUERADE
          changed=true
        done

        # Clean up CT rules
        while iptables -t raw -C PREROUTING -i fwbr+ -j CT --zone 1 2>/dev/null; do
          iptables -t raw -D PREROUTING -i fwbr+ -j CT --zone 1
          changed=true
        done

        # Clean up FORWARD rules
        while iptables -C FORWARD -i vmwg0 -o wg0 -j ACCEPT 2>/dev/null; do
          iptables -D FORWARD -i vmwg0 -o wg0 -j ACCEPT
          changed=true
        done

        while iptables -C FORWARD -i wg0 -o vmwg0 -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null; do
          iptables -D FORWARD -i wg0 -o vmwg0 -m state --state RELATED,ESTABLISHED -j ACCEPT
          changed=true
        done

        if [ "$changed" = "true" ]; then
          echo "Firewall rules cleaned up"
        fi
      args:
        executable: /bin/bash
      register: comprehensive_iptables_cleanup
      changed_when: "'Firewall rules cleaned up' in comprehensive_iptables_cleanup.stdout"

    - name: Check existing policy routing rules
      ansible.builtin.shell: |
        set -o pipefail
        ip rule show | grep -q "from {{ vm_subnet }} lookup {{ routing_table_id }}" ||
        ip rule show | grep -q "to {{ vm_subnet }} lookup {{ routing_table_id }}"
      args:
        executable: /bin/bash
      register: policy_rules_check
      failed_when: false
      changed_when: false

    - name: Clean up policy routing rules
      ansible.builtin.shell: |
        set -o pipefail
        changed=false
        if ip rule show | grep -q "from {{ vm_subnet }} lookup {{ routing_table_id }}"; then
          ip rule del from {{ vm_subnet }} table {{ routing_table_id }}
          changed=true
        fi
        if ip rule show | grep -q "to {{ vm_subnet }} lookup {{ routing_table_id }}"; then
          ip rule del to {{ vm_subnet }} table {{ routing_table_id }}
          changed=true
        fi
        if [ "$changed" = "true" ]; then
          echo "Rules removed"
        fi
      args:
        executable: /bin/bash
      register: policy_cleanup_result
      when: policy_rules_check.rc == 0
      changed_when: "'Rules removed' in policy_cleanup_result.stdout"

    - name: Check if routing table has entries
      ansible.builtin.command: ip route show table {{ routing_table_id }}
      register: routing_table_check
      failed_when: false
      changed_when: false

    - name: Clean up routing table
      ansible.builtin.shell: |
        if [ -n "$(ip route show table {{ routing_table_id }})" ]; then
          ip route flush table {{ routing_table_id }}
          echo "Table flushed"
        fi
      register: route_cleanup_result
      when: routing_table_check.stdout != ""
      changed_when: "'Table flushed' in route_cleanup_result.stdout"

    - name: Remove configuration files and directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        # WireGuard configuration
        - /etc/wireguard/wg0.conf
        # Network interface configuration
        - /etc/network/interfaces.d/vmwgnat
        # dnsmasq configuration
        - /etc/dnsmasq.d/vmwgnat
        # Systemd service files
        - /etc/systemd/system/dnsmasq@.service
        - /etc/systemd/system/wg-quick@wg0.service.d
        # Debug and diagnostic scripts
        - /root/debug-vmwg0.sh
        # Failsafe system files
        - /usr/local/bin/network-failsafe
        - /usr/local/bin/disarm-failsafe.sh
        - /usr/local/bin/recover-network.sh
        - /var/backups/network-failsafe
        - /etc/network-failsafe
        - /tmp/network-failsafe.lock
        # Log files
        - /var/log/network-failsafe.log
        - /var/log/dnsmasq-vmwg.log

    - name: Remove vmwg0 bridge from main Proxmox interfaces file
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        marker: "# {mark} ANSIBLE MANAGED BLOCK - vmwg0"
        state: absent
        backup: true

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Check if iptables rules need saving
      ansible.builtin.stat:
        path: /etc/iptables/rules.v4
      register: iptables_file
      when: ansible_facts['os_family'] == "Debian"

    - name: Save clean iptables rules
      ansible.builtin.shell: |
        iptables-save > /etc/iptables/rules.v4
        ip6tables-save > /etc/iptables/rules.v6
        echo "Rules saved"
      register: iptables_save_result
      when:
        - ansible_facts['os_family'] == "Debian"
        - iptables_file.stat.exists
      changed_when: "'Rules saved' in iptables_save_result.stdout"

    - name: Restart networking
      ansible.builtin.systemd:
        name: networking
        state: restarted

    - name: Verify cleanup completion
      ansible.builtin.shell: |
        set -o pipefail
        echo "=== Cleanup Verification ==="
        echo "vmwg0 interface: $(ip link show vmwg0 2>/dev/null && echo 'EXISTS' || echo 'REMOVED')"
        echo "WireGuard service: $(systemctl is-active wg-quick@wg0 2>/dev/null || echo 'STOPPED')"
        echo "dnsmasq@vmwgnat service: $(systemctl is-active dnsmasq@vmwgnat 2>/dev/null || echo 'STOPPED')"
        echo "Failsafe processes: $(pgrep -f network-failsafe || echo 'NONE')"
        echo "NAT rules: $(iptables -t nat -L POSTROUTING -n | grep '{{ vm_subnet }}' | wc -l) rules found"
        echo "Routing rules: $(ip rule show | grep '{{ routing_table_id }}' | wc -l) rules found"
        echo "=== Cleanup Complete ==="
      args:
        executable: /bin/bash
      register: cleanup_verification
      changed_when: false

    - name: Display cleanup results
      ansible.builtin.debug:
        msg: |
          ‚úÖ VM Subnet Cleanup Complete!

          {{ cleanup_verification.stdout }}

          üîß What was cleaned up:
          - VM bridge vmwg0 removed
          - WireGuard VPN connection stopped
          - DHCP server (dnsmasq) stopped
          - NAT and routing rules removed
          - All configuration files removed
          - Failsafe system deactivated

          üåê Your Proxmox host is back to its original network state.

          Next steps:
          - Reboot recommended to ensure all changes take effect
          - Check Proxmox web interface - vmwg0 bridge should be gone
          - Any VMs that were using vmwg0 will need new network configuration
