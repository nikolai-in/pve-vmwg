---
- name: Configure Proxmox VM Subnet with WireGuard VPN Routing
  hosts: proxmox_hosts
  become: true
  vars:
    vm_subnet: "10.10.0.0/24"
    vm_gateway: "10.10.0.1"
    vm_dhcp_range_start: "10.10.0.2"
    vm_dhcp_range_end: "10.10.0.254"
    routing_table_id: 200

  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - wireguard
          - wireguard-tools
          - dnsmasq
          - iptables-persistent
        state: present
        update_cache: true

    - name: Create WireGuard configuration directory
      ansible.builtin.file:
        path: /etc/wireguard
        state: directory
        mode: "0700"

    - name: Deploy WireGuard configuration
      ansible.builtin.template:
        src: templates/wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        mode: "0600"
        backup: true
      notify:
        - Restart wireguard

    - name: Create dnsmasq configuration directory
      ansible.builtin.file:
        path: /etc/dnsmasq.d/vmwgnat
        state: directory
        mode: "0755"

    - name: Deploy dnsmasq default configuration
      ansible.builtin.template:
        src: templates/dnsmasq-default.conf.j2
        dest: /etc/dnsmasq.d/vmwgnat/00-default.conf
        mode: "0644"
        backup: true
      notify:
        - Restart dnsmasq

    - name: Deploy dnsmasq vmwg0 interface configuration
      ansible.builtin.template:
        src: templates/dnsmasq-vmwg0.conf.j2
        dest: /etc/dnsmasq.d/vmwgnat/10-vmwg0.conf
        mode: "0644"
        backup: true
      notify:
        - Restart dnsmasq

    - name: Create dnsmasq ethers file
      ansible.builtin.file:
        path: /etc/dnsmasq.d/vmwgnat/ethers
        state: touch
        mode: "0644"

    - name: Deploy dnsmasq systemd service template
      ansible.builtin.template:
        src: templates/dnsmasq@.service.j2
        dest: /etc/systemd/system/dnsmasq@.service
        mode: "0644"
        backup: true
      notify:
        - Reload systemd

    - name: Deploy network interface configuration
      ansible.builtin.template:
        src: templates/vmwgnat.j2
        dest: /etc/network/interfaces.d/vmwgnat
        mode: "0644"
        backup: true
      notify:
        - Reload networking

    - name: Enable and start WireGuard service
      ansible.builtin.systemd:
        name: wg-quick@wg0
        enabled: true
        state: started
        daemon_reload: true

    - name: Enable and start dnsmasq service for vmwgnat
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        enabled: true
        state: started
        daemon_reload: true

    - name: Ensure IP forwarding is enabled
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: true

    - name: Check if iptables persistent directory exists
      ansible.builtin.stat:
        path: /etc/iptables
      register: iptables_dir
      when: ansible_facts['os_family'] == "Debian"

    - name: Save iptables rules
      ansible.builtin.shell: |
        set -o pipefail
        iptables-save > /etc/iptables/rules.v4
        ip6tables-save > /etc/iptables/rules.v6
        echo "Rules saved"
      register: iptables_save_result
      when:
        - ansible_facts['os_family'] == "Debian"
        - iptables_dir.stat.exists
      changed_when: "'Rules saved' in iptables_save_result.stdout"

    - name: Create debug script
      ansible.builtin.template:
        src: templates/debug-vmwg0.sh.j2
        dest: /root/debug-vmwg0.sh
        mode: "0755"

  handlers:
    - name: Restart wireguard
      ansible.builtin.systemd:
        name: wg-quick@wg0
        state: restarted

    - name: Restart dnsmasq
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        state: restarted

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Reload networking
      ansible.builtin.shell: |
        set -o pipefail
        # Check if vmwg0 interface exists before trying to reload
        if ip link show vmwg0 >/dev/null 2>&1; then
          echo "Interface exists, bringing down"
          ifdown vmwg0 2>/dev/null || true
        fi
        # Bring it back up
        ifup vmwg0 && echo "Interface reloaded"
      register: networking_reload_result
      failed_when: networking_reload_result.rc != 0 and "does not exist" not in networking_reload_result.stderr
      changed_when: "'Interface reloaded' in networking_reload_result.stdout"
