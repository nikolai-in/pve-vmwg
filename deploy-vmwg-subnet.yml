---
- name: Configure Proxmox VM Subnet with WireGuard VPN Routing
  hosts: proxmox_hosts
  become: true
  vars:
    vm_subnet: "10.10.0.0/24"
    vm_gateway: "10.10.0.1"
    vm_dhcp_range_start: "10.10.0.2"
    vm_dhcp_range_end: "10.10.0.254"
    routing_table_id: 200

  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - wireguard
          - wireguard-tools
          - dnsmasq
          - iptables-persistent
        state: present
        update_cache: true

    - name: Deploy simple network failsafe script
      ansible.builtin.copy:
        src: src/network-failsafe
        dest: /usr/local/bin/network-failsafe
        mode: "0755"

    - name: Deploy failsafe disarm script (legacy compatibility)
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Legacy compatibility wrapper
          exec /usr/local/bin/network-failsafe disarm "$@"
        dest: /usr/local/bin/disarm-failsafe.sh
        mode: "0755"

    - name: Arm network failsafe (5 minute timeout)
      ansible.builtin.command: /usr/local/bin/network-failsafe arm 300
      register: failsafe_result
      changed_when: true

    - name: Show failsafe status
      ansible.builtin.debug:
        msg: |
          üîí NETWORK FAILSAFE ARMED üîí
          Timeout: 5 minutes (300 seconds)
          The system will auto-restore network config if deployment fails.

          Commands:
          - Status: network-failsafe status
          - Disarm: network-failsafe disarm
          - Test: network-failsafe test

    - name: Disable default dnsmasq service (per Proxmox docs)
      ansible.builtin.systemd:
        name: dnsmasq
        state: stopped
        enabled: false
      failed_when: false

    - name: Create WireGuard configuration directory
      ansible.builtin.file:
        path: /etc/wireguard
        state: directory
        mode: "0700"

    - name: Deploy WireGuard configuration
      ansible.builtin.template:
        src: templates/wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        mode: "0600"
        backup: true
      notify:
        - Restart wireguard

    - name: Create dnsmasq configuration directory
      ansible.builtin.file:
        path: /etc/dnsmasq.d/vmwgnat
        state: directory
        mode: "0755"

    - name: Deploy consolidated dnsmasq configuration
      ansible.builtin.template:
        src: templates/dnsmasq-vmwgnat.conf.j2
        dest: /etc/dnsmasq.d/vmwgnat/vmwgnat.conf
        mode: "0644"
        backup: true
      notify:
        - Restart dnsmasq

    - name: Create dnsmasq ethers file
      ansible.builtin.file:
        path: /etc/dnsmasq.d/vmwgnat/ethers
        state: touch
        mode: "0644"

    - name: Create dnsmasq default configuration for vmwgnat
      ansible.builtin.template:
        src: templates/dnsmasq-vmwgnat-default.j2
        dest: /etc/default/dnsmasq.vmwgnat
        mode: "0644"

    - name: Remove custom systemd template (restore to Proxmox standard)
      ansible.builtin.file:
        path: /etc/systemd/system/dnsmasq@.service
        state: absent
      notify:
        - Reload systemd

    - name: Deploy network interface configuration
      ansible.builtin.template:
        src: templates/vmwgnat.j2
        dest: /etc/network/interfaces.d/vmwgnat
        mode: "0644"
        backup: true
      register: vmwgnat_config
      notify:
        - Reload networking

    - name: Ensure vmwg0 interface is up (initial setup)
      ansible.builtin.shell: |
        set -o pipefail
        # Only bring up if not already configured correctly
        if ! ip addr show vmwg0 2>/dev/null | grep -q "{{ vm_gateway }}/24"; then
          echo "Configuring vmwg0 interface"
          ifup vmwg0 2>/dev/null || {
            # Fallback to direct configuration
            echo "Direct configuration fallback"
            ip link add vmwg0 type bridge 2>/dev/null || true
            ip addr add {{ vm_gateway }}/24 dev vmwg0 2>/dev/null || true
            ip link set vmwg0 up
          }
          echo "Interface configured"
        else
          echo "Interface already configured"
        fi
      register: ifup_result
      changed_when: "'Interface configured' in ifup_result.stdout"
      failed_when: false

    - name: Flush handlers (ensure network changes are applied)
      ansible.builtin.meta: flush_handlers

    - name: Verify vmwg0 interface is operational
      ansible.builtin.command: ip addr show vmwg0
      register: vmwg0_status
      failed_when: "'10.10.0.1/24' not in vmwg0_status.stdout"
      changed_when: false

    - name: Enable and start WireGuard service
      ansible.builtin.systemd:
        name: wg-quick@wg0
        enabled: true
        state: started
        daemon_reload: true

    - name: Wait for vmwg0 interface to be fully ready
      ansible.builtin.pause:
        seconds: 2

    - name: Final verification that vmwg0 interface is ready for dnsmasq
      ansible.builtin.command: ip link show vmwg0
      register: vmwg0_link_status
      failed_when: "'UP' not in vmwg0_link_status.stdout"
      changed_when: false

    - name: Enable and start dnsmasq service for vmwgnat
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        enabled: true
        state: started
        daemon_reload: true

    - name: Wait for dnsmasq to stabilize
      ansible.builtin.pause:
        seconds: 3

    - name: Check if dnsmasq@vmwgnat is running successfully
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        state: started
      register: dnsmasq_status

    - name: Show dnsmasq status for debugging
      ansible.builtin.debug:
        msg: "dnsmasq@vmwgnat status: {{ dnsmasq_status }}"

    - name: Check if standard Proxmox SDN dnsmasq service exists
      ansible.builtin.stat:
        path: /etc/dnsmasq.d/dhcpsnat
      register: dhcpsnat_config_check

    - name: Ensure standard Proxmox SDN dnsmasq service is running
      ansible.builtin.systemd:
        name: dnsmasq@dhcpsnat
        enabled: true
        state: started
        daemon_reload: true
      when: dhcpsnat_config_check.stat.exists
      failed_when: false

    - name: Ensure IP forwarding is enabled
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: true

    - name: Check if iptables persistent directory exists
      ansible.builtin.stat:
        path: /etc/iptables
      register: iptables_dir
      when: ansible_facts['os_family'] == "Debian"

    - name: Save iptables rules
      ansible.builtin.shell: |
        iptables-save > /etc/iptables/rules.v4
        ip6tables-save > /etc/iptables/rules.v6
        echo "Rules saved"
      register: iptables_save_result
      when:
        - ansible_facts['os_family'] == "Debian"
        - iptables_dir.stat.exists
      changed_when: "'Rules saved' in iptables_save_result.stdout"

    - name: Create debug script
      ansible.builtin.template:
        src: templates/debug-vmwg0.sh.j2
        dest: /root/debug-vmwg0.sh
        mode: "0755"

    - name: Add vmwg0 bridge to main Proxmox interfaces file
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        block: |

          # VM Subnet Bridge with WireGuard VPN routing
          # Managed by Ansible - do not edit manually
          auto vmwg0
          iface vmwg0 inet static
              address {{ vm_gateway }}/24
              bridge_ports none
              bridge_stp off
              bridge_fd 0
              # Advanced configuration in /etc/network/interfaces.d/vmwgnat
        marker: "# {mark} ANSIBLE MANAGED BLOCK - vmwg0"
        backup: true
        create: false
      notify:
        - Reload proxmox services

    - name: Create systemd override directory for dnsmasq@vmwgnat
      ansible.builtin.file:
        path: /etc/systemd/system/dnsmasq@vmwgnat.service.d
        state: directory
        mode: "0755"

    - name: Create dnsmasq service override for interface dependency
      ansible.builtin.copy:
        content: |
          [Unit]
          After=network-online.target
          Wants=network-online.target
          # Start after vmwg0 interface is configured
          After=sys-subsystem-net-devices-vmwg0.device
          Wants=sys-subsystem-net-devices-vmwg0.device
        dest: /etc/systemd/system/dnsmasq@vmwgnat.service.d/override.conf
        mode: "0644"
      notify:
        - Reload systemd

    - name: Create systemd override directory for WireGuard
      ansible.builtin.file:
        path: /etc/systemd/system/wg-quick@wg0.service.d
        state: directory
        mode: "0755"

    - name: Create WireGuard service override for network dependency
      ansible.builtin.copy:
        content: |
          [Unit]
          After=network-online.target
          Wants=network-online.target
          # Ensure vmwg0 interface is up before starting WireGuard
          After=network.target
          Requires=network.target
        dest: /etc/systemd/system/wg-quick@wg0.service.d/override.conf
        mode: "0644"
      notify:
        - Reload systemd

    - name: Disarm network failsafe (deployment successful)
      ansible.builtin.command: /usr/local/bin/network-failsafe disarm
      register: failsafe_disarm_result
      changed_when: true
      when: not ansible_check_mode

    - name: Display deployment success message
      ansible.builtin.debug:
        msg: |
          ‚úÖ DEPLOYMENT SUCCESSFUL ‚úÖ
          Network failsafe has been disarmed.
          VM subnet {{ vm_subnet }} is now active with WireGuard VPN routing.

          üõ†Ô∏è  Available commands:
          - network-failsafe status     (check failsafe status)
          - network-failsafe test       (test failsafe system)
          - network-failsafe arm        (manual failsafe)
          - /root/debug-vmwg0.sh        (network and dnsmasq troubleshooting)

  handlers:
    - name: Restart wireguard
      ansible.builtin.systemd:
        name: wg-quick@wg0
        state: restarted

    - name: Restart dnsmasq
      ansible.builtin.systemd:
        name: dnsmasq@vmwgnat
        state: restarted

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Reload networking
      ansible.builtin.shell: |
        # Use timeout to prevent hanging
        timeout 30 bash -c '
          if ip link show vmwg0 >/dev/null 2>&1; then
            echo "Interface exists, bringing down"
            ifdown vmwg0 2>/dev/null || true
            sleep 2
          fi
          echo "Bringing up vmwg0"
          ifup vmwg0 && echo "Interface reloaded"
        ' || {
          echo "Timeout or error occurred, trying direct interface setup"
          # Fallback: direct interface configuration
          ip addr add {{ vm_gateway }}/24 dev vmwg0 2>/dev/null || true
          ip link set vmwg0 up 2>/dev/null || true
          echo "Direct setup completed"
        }
      register: networking_reload_result
      failed_when: false
      changed_when: "'Interface reloaded' in networking_reload_result.stdout or 'Direct setup completed' in networking_reload_result.stdout"

    - name: Reload proxmox services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: reloaded
      loop:
        - pveproxy
        - pvedaemon
      failed_when: false

    - name: Deployment complete - show next steps
      ansible.builtin.debug:
        msg: |

          ‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

          üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

          1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É vmwgnat:
             systemctl status vmwgnat

          2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Proxmox SDN:
             /root/fix-proxmox-sdn.sh

          3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å LXC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:
             pct start 222

          4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:
             /root/debug-vmwg0.sh
             /root/debug-lxc.sh

          ‚ÑπÔ∏è  IP –∞–¥—Ä–µ—Å–∞ VM subnet: {{ vm_subnet }}
          üö™ Gateway: {{ vm_gateway }}
          üîó WireGuard: {{ wg_server_endpoint }}

          üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
